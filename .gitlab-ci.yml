# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - publish
  - deploy

frontend-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - npm install
  script:
    - echo "Compiling the code..."
    - npm run build
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  before_script:
    - npm install
  script:
    - echo "Running unit tests..."
    - npm run test -- --watchAll=false
    - echo "Testing Complete"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  before_script:
    - npm install
  script:
    - echo "Linting code..."
    - npm run lint
    - echo "No lint issues found."

frontend-publish-job:
  stage: publish
  #image: docker:19.03.12
  script:
    # login before push image
    - echo "login before build and push"
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "build docker images"
    - docker-compose build --no-cache
    - echo "push images to dockerhub"
    - docker-compose push
    - docker logout $CI_REGISTRY_USER
  only:
    - dev

frontend-deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  #environment: production
  script:
    # for private registry pull login is needed
    #- echo "CI registry" $CI_REGISTRY
    #- docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD
    - echo "stopping previous deployment"
    - docker-compose down
    - echo "clean images not used"
    - docker image prune
    - echo "pulling image from registry"
    - docker-compose pull
    - echo "Deploying application..."
    - docker-compose up -d
    - echo "Application successfully deployed."
    # for private registry
    #- docker logout $CI_REGISTRY_USER
  only:
    - main
